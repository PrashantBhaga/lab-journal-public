name: Publish to WordPress
on:
  push:
    branches:
      - main
    paths:
      - 'posts/**/*.md'  # Only trigger when files in the posts folder change

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to determine changes
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Install dependencies
        run: npm install front-matter node-fetch@2 base-64
      
      - name: Prepare posts (add front matter)
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/prepare-posts.js << 'EOL'
          const fs = require('fs');
          const path = require('path');

          // Function to recursively find markdown files
          function findMarkdownFiles(dir) {
            let results = [];
            const items = fs.readdirSync(dir);
            
            for (const item of items) {
              const fullPath = path.join(dir, item);
              const stat = fs.statSync(fullPath);
              
              if (stat.isDirectory()) {
                results = results.concat(findMarkdownFiles(fullPath));
              } else if (item.endsWith('.md')) {
                results.push(fullPath);
              }
            }
            
            return results;
          }

          // Function to add front matter to a markdown file
          function addFrontMatter(filePath) {
            const content = fs.readFileSync(filePath, 'utf8');
            
            // Check if the file already has front matter
            if (content.startsWith('---')) {
              console.log(`File already has front matter: ${filePath}`);
              return;
            }
            
            // Get title from filename
            const fileName = path.basename(filePath, '.md');
            const title = fileName.replace(/[-_]/g, ' ');
            
            // Get parent directory as category
            const parentDir = path.basename(path.dirname(filePath));
            
            // Create front matter
            const frontMatter = `---
title: "${title}"
categories: ["${parentDir}"]
tags: ["lab-notes"]
status: "publish"
date: "${new Date().toISOString()}"
---

`;

            // Add front matter to content
            const newContent = frontMatter + content;
            
            // Write the new content back to the file
            fs.writeFileSync(filePath, newContent);
            console.log(`Added front matter to: ${filePath}`);
          }

          // Main function
          function main() {
            const postsDir = 'posts';
            if (!fs.existsSync(postsDir)) {
              console.error(`Posts directory not found: ${postsDir}`);
              process.exit(1);
            }
            
            const markdownFiles = findMarkdownFiles(postsDir);
            console.log(`Found ${markdownFiles.length} markdown files.`);
            
            for (const file of markdownFiles) {
              addFrontMatter(file);
            }
          }

          // Run the main function
          main();
          EOL
          node .github/scripts/prepare-posts.js
        
      - name: Publish to WordPress
        env:
          WP_URL: ${{ secrets.WP_URL }}
          WP_USERNAME: ${{ secrets.WP_USERNAME }}
          WP_APPLICATION_PASSWORD: ${{ secrets.WP_APPLICATION_PASSWORD }}
        run: |
          mkdir -p .github/scripts
          cat > .github/scripts/publish-to-wordpress.js << 'EOL'
          const fs = require('fs');
          const path = require('path');
          const fetch = require('node-fetch');
          const frontMatter = require('front-matter');
          const base64 = require('base-64');
          const { execSync } = require('child_process');
          
          // Configuration from environment variables
          const WP_URL = process.env.WP_URL;
          const WP_USERNAME = process.env.WP_USERNAME;
          const WP_APPLICATION_PASSWORD = process.env.WP_APPLICATION_PASSWORD;
          
          // Get list of changed files in the last commit
          const getChangedFiles = () => {
            try {
              const output = execSync('git diff --name-only HEAD^ HEAD').toString();
              return output.split('\n').filter(file => 
                file.startsWith('posts/') && 
                file.endsWith('.md') && 
                fs.existsSync(file)
              );
            } catch (error) {
              console.error('Error getting changed files:', error);
              // Fallback: process all markdown files in the posts directory
              return getAllMarkdownFiles('posts');
            }
          };
          
          // Get all markdown files in a directory recursively
          const getAllMarkdownFiles = (dir) => {
            let results = [];
            const items = fs.readdirSync(dir);
            
            for (const item of items) {
              const fullPath = path.join(dir, item);
              const stat = fs.statSync(fullPath);
              
              if (stat.isDirectory()) {
                results = results.concat(getAllMarkdownFiles(fullPath));
              } else if (item.endsWith('.md')) {
                results.push(fullPath);
              }
            }
            
            return results;
          };
          
          // Process a markdown file and publish to WordPress
          async function processMarkdownFile(filePath) {
            console.log(`Processing ${filePath}`);
            
            // Read and parse the markdown file
            const content = fs.readFileSync(filePath, 'utf8');
            const parsed = frontMatter(content);
            
            // Extract title from frontmatter or filename
            const title = parsed.attributes.title || 
                          path.basename(filePath, '.md').replace(/[-_]/g, ' ');
            
            // Prepare post data
            const postData = {
              title: title,
              content: parsed.body,
              status: parsed.attributes.status || 'publish',
            };
            
            // Add categories if specified
            if (parsed.attributes.categories && Array.isArray(parsed.attributes.categories)) {
              postData.categories = await resolveCategories(parsed.attributes.categories);
            }
            
            // Add tags if specified
            if (parsed.attributes.tags && Array.isArray(parsed.attributes.tags)) {
              postData.tags = await resolveTags(parsed.attributes.tags);
            }
            
            // Add date if specified
            if (parsed.attributes.date) {
              postData.date = parsed.attributes.date;
            }
            
            // Add featured media if specified
            if (parsed.attributes.featured_image) {
              const mediaId = await uploadFeaturedImage(parsed.attributes.featured_image);
              if (mediaId) {
                postData.featured_media = mediaId;
              }
            }
            
            // Check if post already exists by title
            const existingPost = await findPostByTitle(title);
            let method = 'POST';
            let url = `${WP_URL}/wp-json/wp/v2/posts`;
            
            if (existingPost) {
              method = 'PUT';
              url = `${WP_URL}/wp-json/wp/v2/posts/${existingPost.id}`;
              console.log(`Updating existing post: "${title}" (ID: ${existingPost.id})`);
            } else {
              console.log(`Creating new post: "${title}"`);
            }
            
            // Post to WordPress
            try {
              const response = await fetch(url, {
                method: method,
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': 'Basic ' + base64.encode(`${WP_USERNAME}:${WP_APPLICATION_PASSWORD}`)
                },
                body: JSON.stringify(postData)
              });
              
              if (response.ok) {
                const data = await response.json();
                console.log(`Successfully published "${title}" to WordPress with ID ${data.id}`);
                console.log(`Post URL: ${data.link}`);
              } else {
                console.error(`Failed to publish "${title}": ${response.statusText}`);
                const errorText = await response.text();
                console.error(errorText);
              }
            } catch (error) {
              console.error(`Error publishing "${title}":`, error);
            }
          }
          
          // Find a post by its title
          async function findPostByTitle(title) {
            try {
              const response = await fetch(
                `${WP_URL}/wp-json/wp/v2/posts?search=${encodeURIComponent(title)}`,
                {
                  headers: {
                    'Authorization': 'Basic ' + base64.encode(`${WP_USERNAME}:${WP_APPLICATION_PASSWORD}`)
                  }
                }
              );
              
              if (response.ok) {
                const posts = await response.json();
                return posts.find(post => post.title.rendered === title);
              }
              return null;
            } catch (error) {
              console.error(`Error finding post by title:`, error);
              return null;
            }
          }
          
          // Resolve category names to IDs
          async function resolveCategories(categoryNames) {
            try {
              // Get all categories
              const response = await fetch(`${WP_URL}/wp-json/wp/v2/categories?per_page=100`);
              const categories = await response.json();
              
              // Map category names to IDs, creating new ones if needed
              const categoryIds = [];
              
              for (const name of categoryNames) {
                let category = categories.find(cat => 
                  cat.name.toLowerCase() === name.toLowerCase());
                
                if (!category) {
                  // Create the category if it doesn't exist
                  const createResponse = await fetch(`${WP_URL}/wp-json/wp/v2/categories`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Basic ' + base64.encode(`${WP_USERNAME}:${WP_APPLICATION_PASSWORD}`)
                    },
                    body: JSON.stringify({ name })
                  });
                  
                  if (createResponse.ok) {
                    category = await createResponse.json();
                    console.log(`Created new category: ${name} (ID: ${category.id})`);
                  } else {
                    console.error(`Failed to create category: ${name}`);
                    continue;
                  }
                }
                
                categoryIds.push(category.id);
              }
              
              return categoryIds;
            } catch (error) {
              console.error('Error resolving categories:', error);
              return [];
            }
          }
          
          // Resolve tag names to IDs
          async function resolveTags(tagNames) {
            try {
              // Get all tags
              const response = await fetch(`${WP_URL}/wp-json/wp/v2/tags?per_page=100`);
              const tags = await response.json();
              
              // Map tag names to IDs, creating new ones if needed
              const tagIds = [];
              
              for (const name of tagNames) {
                let tag = tags.find(t => t.name.toLowerCase() === name.toLowerCase());
                
                if (!tag) {
                  // Create the tag if it doesn't exist
                  const createResponse = await fetch(`${WP_URL}/wp-json/wp/v2/tags`, {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                      'Authorization': 'Basic ' + base64.encode(`${WP_USERNAME}:${WP_APPLICATION_PASSWORD}`)
                    },
                    body: JSON.stringify({ name })
                  });
                  
                  if (createResponse.ok) {
                    tag = await createResponse.json();
                    console.log(`Created new tag: ${name} (ID: ${tag.id})`);
                  } else {
                    console.error(`Failed to create tag: ${name}`);
                    continue;
                  }
                }
                
                tagIds.push(tag.id);
              }
              
              return tagIds;
            } catch (error) {
              console.error('Error resolving tags:', error);
              return [];
            }
          }
          
          // Upload featured image
          async function uploadFeaturedImage(imagePath) {
            // Implement if needed
            return null;
          }
          
          // Main function
          async function main() {
            const changedFiles = getChangedFiles();
            
            if (changedFiles.length === 0) {
              console.log('No markdown files changed in this commit.');
              return;
            }
            
            console.log(`Found ${changedFiles.length} changed markdown files.`);
            
            for (const file of changedFiles) {
              await processMarkdownFile(file);
            }
          }
          
          // Run the main function
          main().catch(error => {
            console.error('Unhandled error:', error);
            process.exit(1);
          });
          EOL
          node .github/scripts/publish-to-wordpress.js
